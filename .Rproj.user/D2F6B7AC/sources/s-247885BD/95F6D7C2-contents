#####################################################
# Compile data to create map with arrows in Tableau #
#####################################################
rm(list = ls())
wd <- "H:/data/"
repo <- "H:/message_trade/"
msg_dir <- "C:/ProgramData/Anaconda3/Lib/site-packages/message_ix/model/output"
setwd(wd)

library('plyr')
library('dplyr')
library('magrittr')
library('jsfunctions')
library('ggplot2')
library('readxl')
library('gdxrrw') # install from github (lolow/gdxtools)
library('NISTunits')

input <- paste0(wd, "output/derived/nodes")
output <- paste0(wd, "output/analysis/message")

# Import gdx activity
scenario <- 'baseline'
version <- 1

activity <- read_MESSAGE(msg_scenario = scenario, msg_version = version, msg_variable = 'ACT')

activity$vintage <- as.numeric(activity$vintage)
activity$year_all <- as.numeric(activity$year_all)

activity <- subset(activity, grepl('_exp_', tec) & grepl('gas_exp', tec) == F)

activity$importer <- toupper(substr(activity$tec, nchar(activity$tec)-2, nchar(activity$tec)))
activity$exporter <- stringr::str_replace(activity$node, 'R14_', '')
activity$energy <- sub("\\_.*", "", activity$tec)
activity$year <- activity$year_all
activity$scenario <- scenario

activity <- activity[c('scenario', 'exporter', 'importer', 'energy', 'year', 'value')]

# Get net exports
regions <- read.csv(file.path(wd, 'raw/ConversionTables/region_coordinates.csv'), stringsAsFactors = F)

paths <- left_join(activity, activity, by = c('exporter' = 'importer', 'importer' = 'exporter', 'energy', 'scenario', 'year'))
paths$value.x[is.na(paths$value.x)] <- 0
paths$value.y[is.na(paths$value.y)] <- 0
paths$net_exports <- paths$value.x - paths$value.y

paths <- subset(paths, net_exports > 0)
paths <- paths[c('scenario', 'exporter', 'importer', 'energy', 'year', 'net_exports')]

# Add coordinates
paths <- left_join(paths, regions, by = c('exporter' = 'region'))
paths <- left_join(paths, regions, by = c('importer' = 'region'))

names(paths) <- c('scenario', 'exporter', 'importer', 'energy', 'year', 'net_exports',
                  'lat.exporter', 'long.exporter', 'lat.importer', 'long.importer')

pair_id <- unique(paths[c('exporter', 'importer')])
pair_id$id <- 1:nrow(pair_id)

paths <- left_join(paths, pair_id, by = c('exporter', 'importer'))

# Reshape long
paths.exporter <- unique(paths[c('scenario', 'exporter', 'energy', 'year', 'id', 'net_exports', 'lat.exporter', 'long.exporter')])
  paths.exporter$step <- 1
paths.importer <- unique(paths[c('scenario', 'importer', 'energy', 'year', 'id', 'net_exports', 'lat.importer', 'long.importer')])
  paths.importer$step <- 2
names(paths.exporter) <- names(paths.importer) <- c('scenario', 'region', 'energy', 'year', 'id', 'net_exports', 'lat', 'long', 'step')

paths <- rbind(paths.exporter, paths.importer)
isid('paths', c('scenario', 'energy', 'year', 'id', 'step'))

paths <- arrange(paths, year, energy, id, desc(step))
paths_angle <- group_by(paths, id) %>% mutate(lag_lat = lag(lat),
                                              lag_long = lag(long))
paths_angle$diff_lat <- paths_angle$lat - paths_angle$lag_lat
paths_angle$diff_long <- paths_angle$long - paths_angle$lag_long
paths_angle <- subset(paths_angle, !is.na(diff_long) & !is.na(diff_lat))
paths_angle <- unique(paths_angle[c('id', 'step', 'diff_lat', 'diff_long')])

paths_angle$angle <- NISTradianTOdeg(atan2(paths_angle$diff_lat, paths_angle$diff_long))
isid('paths_angle', c('id', 'step'))
paths_angle <- subset(paths_angle, step == 1)[c('id', 'angle')]
isid('paths_angle', c('id'))
paths_angle$step <- 2

paths <- left_join(paths, paths_angle, by = c('id', 'step'))

# Add all angles (for shape)
all_angles <- as.data.frame(-180:180)
names(all_angles) <- 'angle'

all_angles <- as.data.frame(rep(all_angles, nrow(paths)))


paths$angle <- as.integer(paths$angle)
paths <- full_join(paths, all_angles, by = c('angle'))

write.csv(paths, file.path(output, 'message_trade_paths.csv'))

