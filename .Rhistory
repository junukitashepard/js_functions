#########################################################
rm(list = ls())
wd <- "H:/data/"
setwd(wd)
library('plyr')
library('dplyr')
library('magrittr')
library('jsfunctions')
library('RMySQL')
output <-   paste0(wd, "output/")
temp <-     paste0(wd, "temp/")
raw <-      paste0(wd, "raw/")
# Import from SQL database
for (c in c('1990_2008', '2009_2016')) {
sql_statement <- paste0("SELECT * FROM WEB.WEB_", c, " ",
"WHERE (FLOW = 'Exports' OR FLOW = 'Imports') AND UNIT = 'TJ'")
import_sql(statement = sql_statement,
user = 'root',
password = 'SEAmonst3r!',
dbname = 'BACI_TRADE',
outdf = paste0('web.', c))
}
# Append files
web.1990_2008 <- web.1990_2008[c('IEA_UNIT', 'IEA_COUNTRY', 'Product', 'Flow', 'Time', 'Value')]
web.2009_2016 <- web.2009_2016[c('IEA_UNIT', 'IEA_COUNTRY', 'Product', 'Flow', 'Time', 'Value')]
web <- unique(rbind(web.1990_2008, web.2009_2016))
isid('web', c('IEA_COUNTRY', 'Product', 'Time', 'Flow'))
# Clean up string (Product)
web$Product <- stringr::str_replace_all(web$Product, '\"', '')
# Update energy definitions
BIO <- c('Biofuels and waste', 'Peat and peat products')
COAL <- c('Coal and coal products')
CRU <- c('Crude, NGL and feedstocks', 'Oil shale and oil sands')
PET <- c('Oil products')
NUC <- c('Nuclear')
NG <- c('Natural gas')
web$energy <- NA
for (c in c('BIO', 'COAL', 'CRU', 'PET', 'NUC', 'NG')) {
assign('elist', get(c))
web$energy[web$Product %in% elist] <- c
}
web <- subset(web, !is.na(energy))
names(web) <- c('unit', 'iso.country', 'product', 'flow', 'year', 'value', 'energy')
# Collapse by energy type
web <- dplyr::group_by(web, iso.country, flow, year, energy) %>%
dplyr::summarise(value = sum(value, na.rm = T))
assert('web$value[web$flow == "Exports"] <= 0')
web$value[web$flow == "Exports"] <- -1*web$value[web$flow == "Exports"]
# Save file
saveRDS(web, file.path(temp, 'iea_web_trade.rds'))
###############################
# Compile data for validation #
###############################
rm(list = ls())
wd <- "H:/data/"
setwd(wd)
library('plyr')
library('dplyr')
library('magrittr')
library('jsfunctions')
library('RMySQL')
output <-   paste0(wd, "output/")
temp <-     paste0(wd, "temp/")
raw <-      paste0(wd, "raw/")
# Import files
baci <- readRDS(file.path(temp, 'trade_bytype.rds'))
isid('baci', c('iso.country', 'year', 'energy', 'trade'))
web <- readRDS(file.path(temp, 'iea_web_trade.rds'))
isid('web', c('iso.country', 'flow', 'year', 'energy'))
# Oragnize files for merge
baci <- baci[c('iso.country', 'year', 'trade', 'energy', 'v', 'q', 'q_e')]
web <- web[c('iso.country', 'year', 'flow', 'energy', 'value')]
names(web) <- c('iso.country', 'year', 'trade', 'energy', 'iea_value')
web$trade <- tolower(web$trade)
all.df <- left_join(baci, web, by = c('iso.country', 'year', 'trade', 'energy'))
# Export csv for tableau
write.csv(all.df, file.path(output, 'derived/data_validation/iea_trade_data.csv'))
############################################################
# Import trade datasets and collapse to energy commodities #
############################################################
rm(list = ls())
wd <- "H:/data/"
setwd(wd)
library('plyr')
library('dplyr')
library('magrittr')
library('jsfunctions')
library('RMySQL')
output <-   paste0(wd, "output/")
temp <-     paste0(wd, "temp/")
raw <-      paste0(wd, "raw/")
# Import code crosswalk
energyhs4 <- read.csv(file.path(raw, "BACI/energy2hs4.csv"), stringsAsFactors = F)
energyhs4$hs4 <- as.character(energyhs4$hs4)
energyhs4 <- subset(energyhs4, !is.na(hs4))
# Import country names
countries <- read.csv(file.path(raw, "ConversionTables/web_countries.csv"), stringsAsFactors = F)
countries$X <- NULL
countries <- subset(countries, !is.na(subregion))
# Import specific energy
spec_energy <- read.csv(file.path(raw, "ConversionTables/energy_content_of_fuels/fuel_energy_content.csv"),
stringsAsFactors = F)
names(spec_energy) <- c('energy_type', 'specific_energy', 'region')
# Link specific energy to countries dataframe
se_country <- subset(spec_energy, nchar(region) == 3) # country-specific
se_region <- subset(spec_energy, nchar(region) > 3) # region-specific
se.df <- data.frame(web.country = character(0), iso.country = character(0), baci.country = integer(0),
region = character(0), subregion = character(0),
specific_energy = numeric(0), energy = character(0))
for (e in c('BIO', 'CRU', 'COAL', 'NG', 'PET', 'NUC')) {
print(paste0("Linking: ", e))
df.c <- subset(se_country, energy_type == e)[c('specific_energy', 'region')]
df.r <- subset(se_region, energy_type == e)[c('specific_energy', 'region')]
if (nrow(df.c) == 1 & df.c$region == 'all') {
df.out <- countries
df.out$specific_energy <- df.c$specific_energy[1]
} else {
df.out <- left_join(countries, df.c, by = c('iso.country' = 'region'))
df.out$specific_energy[is.na(df.out$specific_energy)] <- 0
for (r in unique(df.r$region)) {
print(r)
df.out$specific_energy[df.out$specific_energy == 0 & df.out$subregion == r] <-
df.r$specific_energy[df.r$region == r]
}
}
assert('!is.na(df.out$specific_energy)')
df.out$energy <- e
names(df.out) <- c('web.country', 'iso.country', 'baci.country', 'region', 'subregion', 'specific_energy', 'energy')
se.df <- rbind(se.df, df.out)
}
se.df <- se.df[c('baci.country', 'energy', 'specific_energy')] # keep relevant variables
rm(list = c('df.c', 'df.out', 'df.r', 'se_country', 'se_region', 'spec_energy'))
# Function "trade2physical": convert quantity (t) to energy flows using region-specific specific energy values
trade2physical <- function(year) {
print(paste0("Converting trade data, year = ", year))
# Import trade (BACI) data from SQL database
sql_statement <- paste0("SELECT * FROM BACI_TRADE.BACI_", year, " ",
"WHERE LEFT(HS6, 2) = '27' OR
LEFT(HS6,2) = '38' OR
LEFT(HS6,2) = '28'")
quiet(
import_sql(statement = sql_statement,
user = 'root',
password = 'SEAmonst3r!',
dbname = 'BACI_TRADE',
outdf = 'trade'
))
trade$hs4 <- substr(trade$hs6, 1, 4)
trade <- left_join(trade, energyhs4, by = c('hs4'))
trade <- subset(trade, !is.na(energy))
# Link specific energy by exporting country
trade <- left_join(trade, se.df, by = c('i' = 'baci.country', 'energy' = 'energy'))
environment(assert) <- environment(isid) <- environment()
trade <- subset(trade, grepl('ELEC', energy) == F)
trade <- subset(trade, i != 652 & j != 652) # country 652 does not exist
assert('!is.na(trade$specific_energy)')
# Collapse to i-j-year-energy level
trade <- dplyr::group_by(trade, i, j, t, energy, specific_energy) %>%
dplyr::summarise(v = sum(v, na.rm = T),
q = sum(q, na.rm = T))
trade$q_e <- trade$q * trade$specific_energy #TJ energy flow
# Add country names
trade <- left_join(trade, countries[c('baci.country', 'iso.country')], by = c('i' = 'baci.country'))
trade <- left_join(trade, countries[c('baci.country', 'iso.country')], by = c('j' = 'baci.country'))
names(trade)[9:10] <- c('iso.i', 'iso.j')
assign(paste0('trade.', year), trade, envir = parent.frame())
}
# Function "collapsebytype": collapse to imports and exports for IEA data validation
collapsebytype <- function(year) {
print(paste0("Collapsing data, year = ", year))
assign('df', get(paste0('trade.', year)))
# Collapse to imports and exports separately
assign('imports', dplyr::group_by(df, j, iso.j, t, energy) %>%
dplyr::summarise(v = sum(v, na.rm = T),
q= sum(q, na.rm = T),
q_e = sum(q_e, na.rm = T)))
assign('exports', dplyr::group_by(df, i, iso.i, t, energy) %>%
dplyr::summarise(v = sum(v, na.rm = T),
q = sum(q, na.rm = T),
q_e = sum(q_e, na.rm = T)))
names(exports) <- names(imports) <- c('baci.country', 'iso.country', 'year', 'energy', 'v', 'q', 'q_e')
exports$trade <- 'exports'
imports$trade <- 'imports'
assign(paste0('trade_bytype.', year),
rbind(as.data.frame(exports), as.data.frame(imports)),
envir = parent.frame())
}
# Run programs by year
trade2physical(year = 1995)
collapsebytype(year = 1995)
trade <- trade.1995
trade_bytype <- trade_bytype.1995
for (y in 1996:2014) {
trade2physical(year = y)
collapsebytype(year = y)
assign('trade', rbind(as.data.frame(trade), as.data.frame(get(paste0('trade.', y)))))
assign('trade_bytype', rbind(as.data.frame(trade_bytype), as.data.frame(get(paste0('trade_bytype.', y)))))
}
# Write files
saveRDS(trade, file.path(temp, 'trade.rds'))
saveRDS(trade_bytype, file.path(temp, 'trade_bytype.rds'))
#########################################################
# Import WEB datasets and keep only imports and exports #
#########################################################
rm(list = ls())
wd <- "H:/data/"
setwd(wd)
library('plyr')
library('dplyr')
library('magrittr')
library('jsfunctions')
library('RMySQL')
output <-   paste0(wd, "output/")
temp <-     paste0(wd, "temp/")
raw <-      paste0(wd, "raw/")
# Import from SQL database
for (c in c('1990_2008', '2009_2016')) {
sql_statement <- paste0("SELECT * FROM WEB.WEB_", c, " ",
"WHERE (FLOW = 'Exports' OR FLOW = 'Imports') AND UNIT = 'TJ'")
import_sql(statement = sql_statement,
user = 'root',
password = 'SEAmonst3r!',
dbname = 'BACI_TRADE',
outdf = paste0('web.', c))
}
# Append files
web.1990_2008 <- web.1990_2008[c('IEA_UNIT', 'IEA_COUNTRY', 'Product', 'Flow', 'Time', 'Value')]
web.2009_2016 <- web.2009_2016[c('IEA_UNIT', 'IEA_COUNTRY', 'Product', 'Flow', 'Time', 'Value')]
web <- unique(rbind(web.1990_2008, web.2009_2016))
isid('web', c('IEA_COUNTRY', 'Product', 'Time', 'Flow'))
# Clean up string (Product)
web$Product <- stringr::str_replace_all(web$Product, '\"', '')
# Update energy definitions
BIO <- c('Biofuels and waste', 'Peat and peat products')
COAL <- c('Coal and coal products')
CRU <- c('Crude, NGL and feedstocks', 'Oil shale and oil sands')
PET <- c('Oil products')
NUC <- c('Nuclear')
NG <- c('Natural gas')
web$energy <- NA
for (c in c('BIO', 'COAL', 'CRU', 'PET', 'NUC', 'NG')) {
assign('elist', get(c))
web$energy[web$Product %in% elist] <- c
}
web <- subset(web, !is.na(energy))
names(web) <- c('unit', 'iso.country', 'product', 'flow', 'year', 'value', 'energy')
# Collapse by energy type
web <- dplyr::group_by(web, iso.country, flow, year, energy) %>%
dplyr::summarise(value = sum(value, na.rm = T))
assert('web$value[web$flow == "Exports"] <= 0')
web$value[web$flow == "Exports"] <- -1*web$value[web$flow == "Exports"]
# Save file
saveRDS(web, file.path(temp, 'iea_web_trade.rds'))
###############################
# Compile data for validation #
###############################
rm(list = ls())
wd <- "H:/data/"
setwd(wd)
library('plyr')
library('dplyr')
library('magrittr')
library('jsfunctions')
library('RMySQL')
output <-   paste0(wd, "output/")
temp <-     paste0(wd, "temp/")
raw <-      paste0(wd, "raw/")
# Import files
baci <- readRDS(file.path(temp, 'trade_bytype.rds'))
isid('baci', c('iso.country', 'year', 'energy', 'trade'))
web <- readRDS(file.path(temp, 'iea_web_trade.rds'))
isid('web', c('iso.country', 'flow', 'year', 'energy'))
# Oragnize files for merge
baci <- baci[c('iso.country', 'year', 'trade', 'energy', 'v', 'q', 'q_e')]
web <- web[c('iso.country', 'year', 'flow', 'energy', 'value')]
names(web) <- c('iso.country', 'year', 'trade', 'energy', 'iea_value')
web$trade <- tolower(web$trade)
all.df <- left_join(baci, web, by = c('iso.country', 'year', 'trade', 'energy'))
# Export csv for tableau
write.csv(all.df, file.path(output, 'derived/data_validation/iea_trade_data.csv'))
############################################################
# Import trade datasets and collapse to energy commodities #
############################################################
rm(list = ls())
wd <- "H:/data/"
setwd(wd)
library('plyr')
library('dplyr')
library('magrittr')
library('jsfunctions')
library('RMySQL')
output <-   paste0(wd, "output/")
temp <-     paste0(wd, "temp/")
raw <-      paste0(wd, "raw/")
# Import code crosswalk
energyhs4 <- read.csv(file.path(raw, "BACI/energy2hs4.csv"), stringsAsFactors = F)
energyhs4$hs4 <- as.character(energyhs4$hs4)
energyhs4 <- subset(energyhs4, !is.na(hs4))
# Import country names
countries <- read.csv(file.path(raw, "ConversionTables/web_countries.csv"), stringsAsFactors = F)
countries$X <- NULL
countries <- subset(countries, !is.na(subregion))
# Import specific energy
spec_energy <- read.csv(file.path(raw, "ConversionTables/energy_content_of_fuels/fuel_energy_content.csv"),
stringsAsFactors = F)
names(spec_energy) <- c('energy_type', 'specific_energy', 'region')
# Link specific energy to countries dataframe
se_country <- subset(spec_energy, nchar(region) == 3) # country-specific
se_region <- subset(spec_energy, nchar(region) > 3) # region-specific
se.df <- data.frame(web.country = character(0), iso.country = character(0), baci.country = integer(0),
region = character(0), subregion = character(0),
specific_energy = numeric(0), energy = character(0))
for (e in c('BIO', 'CRU', 'COAL', 'NG', 'PET', 'NUC')) {
print(paste0("Linking: ", e))
df.c <- subset(se_country, energy_type == e)[c('specific_energy', 'region')]
df.r <- subset(se_region, energy_type == e)[c('specific_energy', 'region')]
if (nrow(df.c) == 1 & df.c$region == 'all') {
df.out <- countries
df.out$specific_energy <- df.c$specific_energy[1]
} else {
df.out <- left_join(countries, df.c, by = c('iso.country' = 'region'))
df.out$specific_energy[is.na(df.out$specific_energy)] <- 0
for (r in unique(df.r$region)) {
print(r)
df.out$specific_energy[df.out$specific_energy == 0 & df.out$subregion == r] <-
df.r$specific_energy[df.r$region == r]
}
}
assert('!is.na(df.out$specific_energy)')
df.out$energy <- e
names(df.out) <- c('web.country', 'iso.country', 'baci.country', 'region', 'subregion', 'specific_energy', 'energy')
se.df <- rbind(se.df, df.out)
}
se.df <- se.df[c('baci.country', 'energy', 'specific_energy')] # keep relevant variables
rm(list = c('df.c', 'df.out', 'df.r', 'se_country', 'se_region', 'spec_energy'))
year <- 2002
View(se.df)
print(paste0("Converting trade data, year = ", year))
# Import trade (BACI) data from SQL database
sql_statement <- paste0("SELECT * FROM BACI_TRADE.BACI_", year, " ",
"WHERE LEFT(HS6, 2) = '27' OR
LEFT(HS6,2) = '38' OR
LEFT(HS6,2) = '28'")
quiet(
import_sql(statement = sql_statement,
user = 'root',
password = 'SEAmonst3r!',
dbname = 'BACI_TRADE',
outdf = 'trade'
))
trade$hs4 <- substr(trade$hs6, 1, 4)
trade <- left_join(trade, energyhs4, by = c('hs4'))
trade <- subset(trade, !is.na(energy))
check <- subset(trade, j == 40)
View(check)
print(paste0("Converting trade data, year = ", year))
# Import trade (BACI) data from SQL database
sql_statement <- paste0("SELECT * FROM BACI_TRADE.BACI_", year, " ",
"WHERE LEFT(HS6, 2) = '27' OR
LEFT(HS6,2) = '38' OR
LEFT(HS6,2) = '28'")
quiet(
import_sql(statement = sql_statement,
user = 'root',
password = 'SEAmonst3r!',
dbname = 'BACI_TRADE',
outdf = 'trade'
))
check <- subset(trade, j == 40)
table(check$hs6)
trade$hs4 <- substr(trade$hs6, 1, 4)
table(trade$hs4)
table(energyhs4$hs4)
############################################################
# Import trade datasets and collapse to energy commodities #
############################################################
rm(list = ls())
wd <- "H:/data/"
setwd(wd)
library('plyr')
library('dplyr')
library('magrittr')
library('jsfunctions')
library('RMySQL')
output <-   paste0(wd, "output/")
temp <-     paste0(wd, "temp/")
raw <-      paste0(wd, "raw/")
# Import code crosswalk
energyhs4 <- read.csv(file.path(raw, "BACI/energy2hs4.csv"), stringsAsFactors = F)
energyhs4$hs4 <- as.character(energyhs4$hs4)
energyhs4 <- subset(energyhs4, !is.na(hs4))
# Import country names
countries <- read.csv(file.path(raw, "ConversionTables/web_countries.csv"), stringsAsFactors = F)
countries$X <- NULL
countries <- subset(countries, !is.na(subregion))
# Import specific energy
spec_energy <- read.csv(file.path(raw, "ConversionTables/energy_content_of_fuels/fuel_energy_content.csv"),
stringsAsFactors = F)
names(spec_energy) <- c('energy_type', 'specific_energy', 'region')
# Link specific energy to countries dataframe
se_country <- subset(spec_energy, nchar(region) == 3) # country-specific
se_region <- subset(spec_energy, nchar(region) > 3) # region-specific
se.df <- data.frame(web.country = character(0), iso.country = character(0), baci.country = integer(0),
region = character(0), subregion = character(0),
specific_energy = numeric(0), energy = character(0))
for (e in c('BIO', 'CRU', 'COAL', 'NG', 'PET', 'NUC')) {
print(paste0("Linking: ", e))
df.c <- subset(se_country, energy_type == e)[c('specific_energy', 'region')]
df.r <- subset(se_region, energy_type == e)[c('specific_energy', 'region')]
if (nrow(df.c) == 1 & df.c$region == 'all') {
df.out <- countries
df.out$specific_energy <- df.c$specific_energy[1]
} else {
df.out <- left_join(countries, df.c, by = c('iso.country' = 'region'))
df.out$specific_energy[is.na(df.out$specific_energy)] <- 0
for (r in unique(df.r$region)) {
print(r)
df.out$specific_energy[df.out$specific_energy == 0 & df.out$subregion == r] <-
df.r$specific_energy[df.r$region == r]
}
}
assert('!is.na(df.out$specific_energy)')
df.out$energy <- e
names(df.out) <- c('web.country', 'iso.country', 'baci.country', 'region', 'subregion', 'specific_energy', 'energy')
se.df <- rbind(se.df, df.out)
}
se.df <- se.df[c('baci.country', 'energy', 'specific_energy')] # keep relevant variables
rm(list = c('df.c', 'df.out', 'df.r', 'se_country', 'se_region', 'spec_energy'))
year <- 2002
print(paste0("Converting trade data, year = ", year))
# Import trade (BACI) data from SQL database
sql_statement <- paste0("SELECT * FROM BACI_TRADE.BACI_", year, " ",
"WHERE LEFT(HS6, 2) = '27' OR
LEFT(HS6,2) = '38' OR
LEFT(HS6,2) = '28'")
quiet(
import_sql(statement = sql_statement,
user = 'root',
password = 'SEAmonst3r!',
dbname = 'BACI_TRADE',
outdf = 'trade'
))
trade$hs4 <- substr(trade$hs6, 1, 4)
check <- subset(trade, j == 40 & energy == 'NG')
trade <- left_join(trade, energyhs4, by = c('hs4'))
check <- subset(trade, j == 40 & energy == 'NG')
View(check)
sum(q*0.04)
sum(check$q)
sum(check$q)*0.04
check <- subset(trade, j == 40)
table(check$energy)
print(paste0("Converting trade data, year = ", year))
# Import trade (BACI) data from SQL database
sql_statement <- paste0("SELECT * FROM BACI_TRADE.BACI_", year, " ",
"WHERE LEFT(HS6, 2) = '27' OR
LEFT(HS6,2) = '38' OR
LEFT(HS6,2) = '28'")
quiet(
import_sql(statement = sql_statement,
user = 'root',
password = 'SEAmonst3r!',
dbname = 'BACI_TRADE',
outdf = 'trade'
))
check <- subset(trade, j == 40 & substr(hs6, 1, 2) == '27')
###################################################
# Scale parameters based on trade volume (in GWa) #
# historical_new_capacity
# (only for export technologies)
###################################################
rm(list = ls())
wd <- "H:/data/"
repo <- "H:/message_trade/"
setwd(wd)
library('plyr')
library('dplyr')
library('magrittr')
library('jsfunctions')
input <-    paste0(wd, 'output/derived/')
output <-   paste0(wd, "output/analysis/msg_parameters/")
source(paste0(repo, 'analysis/3_msg_parameters/scale_msg_parameter/functions.R'))
source(paste0(repo, 'analysis/3_msg_parameters/build_parameters.R'))
# Import regionally aggregated trade data
trade.df <- read.csv(file.path(input, 'trade/regional_trade.csv'), stringsAsFactors = F)
# Energy commodities
energy_list <- c('oil', 'coal', 'loil', 'foil', 'LNG')
# Function: build historical_new_capacity parameter
build_historical_new_capacity <- function(energy) {
environment(scale_exp_parameter) <- environment()
assign('varlist', c('node_loc', 'technology', 'year_vtg', 'value', 'unit'))
assign('parname', 'historical_new_capacity')
assign('tra.energy', energy)
# EXPORTS
assign('msg.technology', paste0(energy, '_exp'))
assign('exports', scale_exp_parameter(parname = parname,
msg.technology = msg.technology,
tra.energy = tra.energy,
varlist = varlist))
# Subset to keep only non-missing value
exports <- subset(exports, !is.na(value))
saveRDS(exports, file.path(output, paste0('historical_new_capacity/', energy, '_exp.rds')))
}
# Run program
for (e in energy_list) {
build_historical_new_capacity(e)
}
library(jsfunctions)
library(jsfunctions)
library(jsfunctions)
library(jsfunctions)
library(jsfunctions)
